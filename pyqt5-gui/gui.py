'''
选项卡控件：QTabWidget
'''
import sys
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QWidget, QApplication, QGroupBox, QPushButton, QLabel, QHBoxLayout,  QVBoxLayout, QGridLayout, QFormLayout, QLineEdit, QTextEdit


class TabWidgetDemo(QTabWidget):
    def __init__(self,parent=None):
        super(TabWidgetDemo,self).__init__(parent)

        self.setWindowTitle("选项卡控件：QTabWidget")
        # self.resize(1500, 700)

        #创建用于显示控件的窗口
        self.tab1 = QWidget()
        self.tab2 = QWidget()
        self.tab3 = QWidget()

        self.addTab(self.tab1,"选项卡1")
        self.addTab(self.tab2, "选项卡2")
        self.addTab(self.tab3, "选项卡3")
        self.tab1UI()
        self.tab2UI()
        self.tab3UI()




    def tab1UI(self):
        self.setTabText(0, "初始分类器训练")

        # 创建表单布局
        self.createGridGroupBox()
        self.creatVboxGroupBox()
        self.creatFormGroupBox()
        self.creatNetGroupBox()

        mainLayout = QVBoxLayout()
        hboxLayout = QHBoxLayout()
        hboxLayout.addStretch()
        hboxLayout.addWidget(self.NetGroupBox)
        hboxLayout.addWidget(self.gridGroupBox)
        hboxLayout.addWidget(self.vboxGroupBox)
        mainLayout.addLayout(hboxLayout)
        mainLayout.addWidget(self.formGroupBox)

        # self.setLayout(mainLayout)
        self.tab1.setLayout(mainLayout)


        # intLineEdit = QLineEdit()
        # doubleLineEdit = QLineEdit()
        # validatorLineEdit = QLineEdit()
        #
        # formLayout.addRow("整数类型", intLineEdit)
        # formLayout.addRow("浮点类型", doubleLineEdit)
        # formLayout.addRow("数字和字母", validatorLineEdit)
        #
        # intLineEdit.setPlaceholderText("整型")
        # doubleLineEdit.setPlaceholderText("浮点型")
        # validatorLineEdit.setPlaceholderText("数字和字母")
        #
        # # 整型校验器[1,99]
        # intValidator = QIntValidator(self)
        # intValidator.setRange(1, 99)
        #
        # # 浮点校验器[-360,360],精度：小数点后两位
        # doubleValidator = QDoubleValidator(self)
        # doubleValidator.setRange(-360, 360)
        # doubleValidator.setNotation(QDoubleValidator.StandardNotation)
        # # 设置精度，小数点2位
        # doubleValidator.setDecimals(2)
        #
        # # 字符和数字 ，正则
        # reg = QRegExp('[a-zA-Z0-9]+$')
        # validator = QRegExpValidator(self)
        # validator.setRegExp(reg)
        #
        # # 设置校验器
        # intLineEdit.setValidator(intValidator)
        # doubleLineEdit.setValidator(doubleValidator)
        # validatorLineEdit.setValidator(validator)
        #
        # self.setLayout(formLayout)



        #表单布局

        # self.contents = QTextEdit()
        # layout.addWidget(self.contents)

        # self.setLayout(layout)
        # self.setWindowTitle("文件对话框演示")



        # self.tab1.setLayout(formLayout)




    def tab2UI(self):
        #水平布局
        layout = QFormLayout()
        sex = QHBoxLayout()
        sex.addWidget(QRadioButton("男"))
        sex.addWidget(QRadioButton("女"))
        layout.addRow(QLabel("性别"),sex)
        layout.addRow("生日",QLineEdit())
        self.setTabText(1,"强化学习训练")
        self.tab2.setLayout(layout)

    def tab3UI(self):
        #水平布局
        layout = QHBoxLayout()
        layout.addWidget(QLabel("科目"))
        layout.addWidget(QCheckBox("物理"))
        layout.addWidget(QCheckBox("高数"))
        self.setTabText(2, "Virustotal上传/下载")
        self.tab3.setLayout(layout)




    def creatNetGroupBox(self):
        self.NetGroupBox = QGroupBox("Config message")
        grid = QGridLayout()

        model = QLabel('model:')
        batch_size = QLabel('batch_size:')
        test_size = QLabel('test_size:')
        val_size = QLabel('val_size:')
        max_seq_len = QLabel('max_seq_len:')
        malware_dir =QLabel('malware_dir:')
        benign_dir =QLabel('benign_dir:')
        lr = QLabel('lr:')
        device = QLabel('device:')
        num_epochs = QLabel('num_epochs:')
        patience =QLabel('patience:')
        seed = QLabel('seed:')
        saved_model = QLabel('saved_model:')

        Lable_list=[model,batch_size,test_size,val_size,max_seq_len,malware_dir,benign_dir,lr,num_epochs,patience,seed,saved_model]

        self.model_Edit = QLineEdit("MalConvBase")
        self.batch_size_Edit = QLineEdit()
        self.test_size_Edit = QLineEdit()
        self.val_size_Edit = QLineEdit()

        self.max_seq_len_Edit = QLineEdit()
        self.malware_dir_Edit = QLineEdit()
        self.benign_dir_Edit = QLineEdit()
        self.lr_Edit = QLineEdit()

        self.device_Edit = QLineEdit()
        self.num_epochs_Edit = QLineEdit()
        self.patience_Edit = QLineEdit()
        self.seed_Edit = QLineEdit()
        self.saved_model_Edit = QLineEdit()

        Edit_list = [self.model_Edit, self.batch_size_Edit, self.test_size_Edit, self.val_size_Edit, self.max_seq_len_Edit, self.malware_dir_Edit,
                     self.benign_dir_Edit, self.lr_Edit, self.num_epochs_Edit,self.patience_Edit, self.seed_Edit, self.saved_model_Edit]

        grid.setSpacing(10)

        for a in range(int(len(Lable_list)/2)):
            i=a+1
            # a=i+1
            #1   2  3  4   5
            #12 34 56  78  910
            # print(2*i-2)
            grid.addWidget(Lable_list[2*i-2], i+1, 0)
            grid.addWidget(Edit_list[2*i-2], i+1, 1)
            # exit()
            # print(i*2)
            grid.addWidget(Lable_list[i*2-1], i+1, 2)
            grid.addWidget(Edit_list[i*2-1], i+1, 3)

        self.buttonToText = QPushButton("获取文本")
        # self.buttonToHTML = QPushButton("获取HTML")

        grid.addWidget(self.buttonToText)
        # layout.addWidget(self.buttonToHTML)

        # self.setLayout(layout)
        self.buttonToText.clicked.connect(self.onClick_ButtonToText)
        # self.buttonToHTML.clicked.connect(self.onClick_ButtonToHTML)

        # self.buttonText.clicked.connect(self.onClick_ButtonText)
        # self.buttonHTML.clicked.connect(self.onClick_ButtonHTML)
        self.NetGroupBox.setLayout(grid)


    def onClick_ButtonToText(self):
        print(self.model_Edit.text())

    def creatNetGroupBox1(self):

        self.NetGroupBox = QGroupBox("Net layout")
        # hlayout = QGridLayout()

        # self.setLayout(hlayout)
        # self.setWindowTitle("水平盒布局")

        hlayout = QHBoxLayout()
        #单行文字
        hlayout.addWidget(QLabel("model："),0)
        #单行输入行
        model_edit = QLineEdit("MalConvBase")
        hlayout.addWidget(model_edit,0)
        # 单行文字
        hlayout.addWidget(QLabel("batch_size："),0)
        # 单行输入行
        model_edit = QLineEdit("0.2")
        hlayout.addWidget(model_edit,0)
        # 设置按钮的间距
        # hlayout.setSpacing(100)
        self.setLayout(hlayout)
        # self.setLayout(hlayout1)

        self.NetGroupBox.setLayout(hlayout)
        # self.move(300, 150)
        # self.setWindowTitle('Calculator')
        # self.show()

    def creatVboxGroupBox(self):
        self.vboxGroupBox = QGroupBox("Vbox layout")
        layout = QVBoxLayout()
        nameLabel = QLabel("科研任务：")
        bigEditor = QTextEdit()
        bigEditor.setPlainText("搭载了空间冷原子钟等14项应用载荷，以及失重心血管研究等航天医学实验设备 "
                               "开展空间科学及技术试验.")
        layout.addWidget(nameLabel)
        layout.addWidget(bigEditor)
        self.vboxGroupBox.setLayout(layout)


    def creatFormGroupBox(self):
        self.formGroupBox = QGroupBox("Form layout")
        layout = QFormLayout()

        performanceLabel = QLabel("性能特点：")
        performanceEditor = QLineEdit("舱内设计更宜居方便天宫生活")

        planLabel = QLabel("发射规划：")
        planEditor = QTextEdit()
        planEditor.setPlainText("2020年之前，中国计划初步完成空间站建设")
        layout.addRow(performanceLabel, performanceEditor)
        layout.addRow(planLabel, planEditor)

        self.formGroupBox.setLayout(layout)



    def createGridGroupBox(self):
        self.gridGroupBox = QGroupBox("Form layout")
        layout = QFormLayout()
        performanceLabel = QLabel("性能特点：")
        performanceEditor = QLineEdit("舱内设计更宜居方便天宫生活")
        planLabel = QLabel("发射规划：")
        planEditor = QTextEdit()
        planEditor.setPlainText("2020年之前，中国计划初步完成空间站建设")
        layout.addRow(performanceLabel, performanceEditor)
        layout.addRow(planLabel, planEditor)

        self.gridGroupBox.setLayout(layout)



        # self.gridGroupBox = QGroupBox("Grid layout")
        # layout = QGridLayout()
        #
        # nameLabel = QLabel("中文名称")
        # nameLineEdit = QLineEdit("天宫二号")
        # emitLabel = QLabel("发射地点")
        # emitLineEdit = QLineEdit("酒泉中心")
        # timeLabel = QLabel("发射时间")
        # timeLineEdit = QLineEdit("9月15日")
        # imgeLabel = QLabel()
        # # pixMap = QPixmap("tiangong.png")
        # # imgeLabel.setPixmap(pixMap)
        # layout.setSpacing(10)
        # layout.addWidget(nameLabel, 1, 0)
        # layout.addWidget(nameLineEdit, 1, 1)
        # layout.addWidget(emitLabel, 2, 0)
        # layout.addWidget(emitLineEdit, 2, 1)
        # layout.addWidget(timeLabel, 3, 0)
        # layout.addWidget(timeLineEdit, 3, 1)
        # layout.addWidget(imgeLabel, 0, 2, 4, 1)
        # layout.setColumnStretch(1, 10)
        # self.gridGroupBox.setLayout(layout)
        # self.setWindowTitle('Basic Layout')



if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon('./images/t10.ico'))

    main = TabWidgetDemo()

    main.show()
    sys.exit(app.exec_())