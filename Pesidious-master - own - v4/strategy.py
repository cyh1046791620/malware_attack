import torch
import numpy as np
import torch.nn as nn
import configparser
config = configparser.ConfigParser()
configFile = config.read('./pesidious.config')
dist = config['RL_train_massage']
device = dist['device']
if device == "cpu":
	device = torch.device("cpu")
elif device=="gpu":
	device = torch.device("cuda:0")


def get_strategy_class(observation_space_shape1,action_space_n1,strategy):
    if strategy == "DQN":
        return DQN(observation_space_shape1, action_space_n1).to(device)
    elif strategy == "DDQN":
        pass
    elif strategy == "ACER":
        pass


class DQN(nn.Module):
    # global observation_space_shape
    # global action_space_n
    def __init__(self,observation_space_shape,action_space_n):

        super(DQN, self).__init__()
        self.layers = nn.Sequential(
			nn.Linear(observation_space_shape, 256),
			nn.ReLU(),
			nn.Linear(256, 64),
			nn.ReLU(),
			nn.Linear(64, action_space_n)
		)
        self.action_space_n = action_space_n
    def forward(self, x):
        return self.layers(x)


    def chooseAction(self, observation, epsilon):
        # print("-" * 100)
        # print(epsilon)
        rand = np.random.random()
        # print(rand)
        # print("-" * 100)
        if rand > epsilon:
            # observation = torch.from_numpy(observation).float().unsqueeze(0).to(device)
            actions = self.forward(observation)
            action = torch.argmax(actions).item()

        else:
            action = np.random.choice(self.action_space_n)

        return action
