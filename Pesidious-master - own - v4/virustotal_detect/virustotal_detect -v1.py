import os.path
from pprint import pprint
from virustotal_python import Virustotal
import base64
import time
from tqdm import tqdm
key_list=[
'873039ffa011722a84d3bcbae49d0f0cd375584d12765f6ac8395ca93341800d',
'79386c1a07afad1707f1408803cd1781dfae6b7c8b793687602e56599501b64f',
'4200862bf5450416896c12aed9b6376f955ddcf34e5fb193702a8c64a54b64cb',
'aaf07de10b4fd38382928483e814fed7e791a66f8d6109380925c2b4a21023ac',
'9b66677e6cc346d5ba7eea36f24f8d49c122e6faa21dcf7fbb6eb426b8ffa6f3',
'a56bb80578dff14ec129aa8e794a501774f2c1e01e3f5356288aa5ef1e1f888f',
'55e144109739eab4572f14e115e8750ddd0a1af434281106107d865703186701',
'92b29c2d877a1f527efb66a006102ac0017dcbd99dddd9eb3b3856108bd4e4ab',
'f7950ef83571c83413d724e134d421b084e6fbed9539c972ebca2f7602b2dc64',
'd5d07ef78adff0be2c96bb71456791263c7cb648cb094a5885895293d9a6843d',
'9f112c99e8b034e8a1aa9d411a648cfbb1a7d3cea20e0f6eeb9cbf6f2aa75bd5',
'873039ffa011722a84d3bcbae49d0f0cd375584d12765f6ac8395ca93341800d',
'79386c1a07afad1707f1408803cd1781dfae6b7c8b793687602e56599501b64f',
]
key_index = 0
vtotal = Virustotal(API_KEY="9f112c99e8b034e8a1aa9d411a648cfbb1a7d3cea20e0f6eeb9cbf6f2aa75bd5", API_VERSION="v3")
# vtotal = Virustotal(API_KEY="9f112c99e8b034e8a1aa9d411a648cfbb1a7d3cea20e0f6eeb9cbf6f2aa75bd5", API_VERSION="v3")
# vtotal = Virustotal(API_KEY="873039ffa011722a84d3bcbae49d0f0cd375584d12765f6ac8395ca93341800d", API_VERSION="v3")
# vtotal = Virustotal(API_KEY="79386c1a07afad1707f1408803cd1781dfae6b7c8b793687602e56599501b64f", API_VERSION="v3")
def change_vtotal(caozuo):
    global vtotal
    global key_index
    key_index=key_index+1
    if key_index == len(key_list):
        return "Run out of key"
    if caozuo==1:
        print("Change New key"+str(key_index)+":"+key_list[key_index])
        with open("plainid.log", "a+") as f:
            f.write("Change New key"+str(key_index)+":"+key_list[key_index] + ":\n")

    elif caozuo==2:
        print("Change New key" + str(key_index) + ":" + key_list[key_index])
        with open("result.log", "a+") as f:
            f.write("Change New key" + str(key_index) + ":" + key_list[key_index] + ":\n")

    vtotal=Virustotal(API_KEY=key_list[key_index], API_VERSION="v3")
    return "Success"

def get_plain_id(base64_id):
    base64_byte = base64.b64decode(base64_id)
    base64_str = str(base64_byte, encoding="utf-8")
    base64_str = base64_str[0:32]
    return base64_str

def get_id(FILE_PATH):
    files = {"file": (os.path.basename(FILE_PATH), open(os.path.abspath(FILE_PATH), "rb"))}
    resp = vtotal.request("files", files=files, method="POST")

    plain_id = get_plain_id(resp.data["id"])

    return plain_id

def get_dir_list(Path):
    malware_files_list = sorted(os.listdir(Path))
    return malware_files_list

def get_dist_Accuraccy(dist):
    for i in range(len(dist)):
        if dist[i][1]!=0:
            dist[i][3]=round(dist[i][2]/dist[i][1], 3)
    return dist

def upload_continue():

    with open('plainid.log', 'r') as fp:
        lines = fp.readlines()
        last_line = lines[-1]
    print(last_line)
    last_len=len(last_line)
    print("Now list len:"+str(last_len))

    dir_Path = input("请输入恶意样本文件夹：")
    # malware_files_list=get_dir_list(dir_Path)[]
    malware_files_list = get_dir_list(dir_Path)[last_len:]
    print(malware_files_list)

    now_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    with open("plainid.log", "a+") as f:
        f.write(now_time + ":\n")

    plain_id = []
    sum = 0
    malware_files_list_tqdm = tqdm(malware_files_list)
    for item_path in malware_files_list_tqdm:
        sum = sum + 1

        try:
            item_plain_id = get_id(dir_Path + "\\" + item_path)
            plain_id.append(item_plain_id)

            if sum%50==0:

                with open("plainid.log", "a+") as f:

                    f.write(str(plain_id) + "\n")

        except Exception as e:
            if "User is banned" in str(e):

                print("\033[1;31m Error massage:User is banned\033[0m")
                # print("")
                a = change_vtotal(1)

            elif "Quota exceeded" in str(e):
                print("\033[1;31m Error massage:Quota exceeded\033[0m")
                # print("Error massage:Quota exceeded")
                a = change_vtotal(1)

            if a == "Run out of key":
                print("\033[1;31m Run out of key\033[0m")
                with open("plainid.log", "a+") as f:
                    f.write("Run out of key" + ":\n")
                    f.write(str(plain_id) + "\n")
            elif a == "Success":
                continue

    with open("plainid.log", "a+") as f:
        f.write(str(plain_id) + "\n")

def upload_file():
    # with open('plainid.log', 'r') as fp:
    #     lines = fp.readlines()
    #     last_line = lines[-1]
    # print(last_line)
    #
    # exit()

    dir_Path = input("请输入恶意样本文件夹：")
    # malware_files_list=get_dir_list(dir_Path)[]
    malware_files_list = get_dir_list(dir_Path)
    print(malware_files_list)

    now_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    with open("plainid.log", "a+") as f:
        f.write(now_time + ":\n")

    plain_id=[]
    sum = 0
    malware_files_list_tqdm = tqdm(malware_files_list)
    for item_path in malware_files_list_tqdm:
        sum = sum + 1

        try:
            item_plain_id = get_id(dir_Path + "\\" + item_path)
            plain_id.append(item_plain_id)
        except Exception as e:
            if "User is banned" in str(e):

                print("\033[1;31m Error massage:User is banned\033[0m")
                # print("")
                a=change_vtotal(1)

            elif "Quota exceeded" in str(e):
                print("\033[1;31m Error massage:Quota exceeded\033[0m")
                # print("Error massage:Quota exceeded")
                a=change_vtotal(1)

            if a == "Run out of key":
                print("\033[1;31m Run out of key\033[0m")
                with open("plainid.log", "a+") as f:
                    f.write("Run out of key" + ":\n")
                    f.write(str(plain_id) + "\n")

            elif a == "Success":
                continue

    with open("plainid.log", "a+") as f:
        f.write(str(plain_id) + "\n")

def main_1():
    #【供应商名字,总检测数量，检出数量，检测率】
    dist=[["Baidu",0,0,0],["ClamAV",0,0,0],["Qihoo-360",0,0,0],["Panda",0,0,0],["Alibaba",0,0,0],["Tencent",0,0,0],["Jiangmin",0,0,0],["Cylance",0,0,0],["Cyren",0,0,0],["Bkav", 0, 0, 0], ["Lionic", 0, 0, 0], ["Elastic", 0, 0, 0], ["DrWeb", 0, 0, 0], ["MicroWorld_eScan", 0, 0, 0],["CAT_QuickHeal", 0, 0,0], ["ALYac", 0, 0, 0], ["Zillya", 0, 0, 0], ["Sangfor", 0, 0, 0],["K7AntiVirus", 0, 0, 0], ["K7GW", 0, 0, 0], ["Cybereason", 0, 0, 0], ["Arcabit", 0, 0, 0], ["BitDefenderTheta", 0, 0, 0],["SymantecMobileInsight", 0, 0, 0], ["Symantec", 0, 0, 0], ["ESET_NOD32", 0, 0, 0], ["APEX", 0, 0, 0],["Paloalto", 0, 0, 0], ["Kaspersky", 0, 0, 0], ["BitDefender", 0, 0, 0], ["NANO_Antivirus", 0, 0, 0], ["ViRobot", 0, 0, 0],["Avast", 0, 0, 0], ["Rising", 0, 0, 0]]
    # dist=[['Baidu', 299, 22, 0.074], ['ClamAV', 299, 105, 0.351], ['Qihoo-360', 0, 0, 0], ['Panda', 302, 185, 0.613], ['Alibaba', 302, 182, 0.603], ['Tencent', 302, 194, 0.642], ['Jiangmin', 302, 218, 0.722], ['Cylance', 286, 226, 0.79], ['Cyren', 302, 208, 0.689], ['Bkav', 302, 132, 0.437], ['Lionic', 301, 223, 0.741], ['Elastic', 302, 233, 0.772], ['DrWeb', 302, 232, 0.768], ['MicroWorld_eScan', 0, 0, 0], ['CAT_QuickHeal', 0, 0, 0], ['ALYac', 302, 217, 0.719], ['Zillya', 293, 222, 0.758], ['Sangfor', 285, 213, 0.747], ['K7AntiVirus', 302, 216, 0.715], ['K7GW', 302, 217, 0.719], ['Cybereason', 298, 241, 0.809], ['Arcabit', 296, 104, 0.351], ['BitDefenderTheta', 302, 143, 0.474], ['SymantecMobileInsight', 302, 0, 0.0], ['Symantec', 295, 224, 0.759], ['ESET_NOD32', 0, 0, 0], ['APEX', 302, 250, 0.828], ['Paloalto', 302, 202, 0.669], ['Kaspersky', 298, 235, 0.789], ['BitDefender', 301, 231, 0.767], ['NANO_Antivirus', 0, 0, 0], ['ViRobot', 302, 91, 0.301], ['Avast', 290, 236, 0.814], ['Rising', 301, 241, 0.801]]

    dir_Path=input("请输入恶意样本文件夹：")
    # malware_files_list=get_dir_list(dir_Path)[]
    malware_files_list = get_dir_list(dir_Path)
    print(malware_files_list)


    now_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    with open("result.log", "a+") as f:
        f.write(now_time + ":\n")

    #开始用结果
    sum=0
    for item_path in malware_files_list:
        sum=sum+1
        item_plain_id=get_id(dir_Path+"\\"+item_path)
        # print(item_plain_id)

        print("-" * 100)
        print(item_path)
        print(item_plain_id)
        #避免错误的response
        i=0
        while i<150:
            time.sleep(3)
            try:
                resp = vtotal.request(f"files/{item_plain_id}")
                res_dict=resp.data["attributes"]["last_analysis_results"]
            except Exception as e:
                print("Error massege:"+str(e))
                print("error response - " + str(i))
                time.sleep(60)
                i = i + 1
                continue

            if res_dict!={}:
                break

            print("error response - "+str(i))
            time.sleep(60)
            i=i+1
        if i==150:
            print("Network error")
            exit()



        # print(resp.data)
        print(res_dict)
        # print(res_dict)
        # time.sleep(2)
        for index in range(len(dist)):
            supply = dist[index][0]
            # print("supply = " + supply)

            if supply in res_dict:
                supply_dist = res_dict[supply]
                # 总数+1
                dist[index][1] += 1
                # 检测出+1
                if supply_dist['category'] == "malicious":
                    dist[index][2] += 1
            else:
                continue
        dist = get_dist_Accuraccy(dist)
        with open("result.log", "a+") as f:
            # f.write(now_time + ":\n")
            f.write(str(dist) + "\n")
        print(dist)
        # time.sleep(2)
        all=len(malware_files_list)
        print(str(sum)+"/"+str(all)+"   sleep-*-*-*-*-*-")

    dist=get_dist_Accuraccy(dist)
    print("结果：")
    print(dist)


    with open("result.log", "a+") as f:
        # f.write(now_time + ":\n")
        f.write(str(dist) + "\n")

if __name__ == '__main__':
    upload_file()
    # main_1()
