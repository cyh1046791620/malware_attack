import os.path
from pprint import pprint
from virustotal_python import Virustotal
import base64
import time
import configparser
import hashlib
config = configparser.ConfigParser()
configFile = config.read('pesidious.config')

from tqdm import tqdm

plainid_log_file = config['virustotal_detect']['plainid_log']
result_log_file = config['virustotal_detect']['result_log']
create_new_log = config['virustotal_detect']['create_new_log']

#主log的位置
plainid_log_dir ="./virustotal_detect/plainid_log/"+plainid_log_file
result_log_dir="./virustotal_detect/result_log/"+result_log_file

#新生成log的文件名
time_now=time.strftime("%Y%m%d-%H%M%S-", time.localtime())
plainid_log_dir_time ="./virustotal_detect/plainid_log/"+time_now+"plainid_log.log"
result_log_dir_time ="./virustotal_detect/result_log/"+time_now+"result_log.log"

#存储间隔（上传、下载间隔）
save_interval_id=int(config['virustotal_detect']['save_interval_id'])
save_interval_res=int(config['virustotal_detect']['save_interval_res'])


key_list=[
'873039ffa011722a84d3bcbae49d0f0cd375584d12765f6ac8395ca93341800d',
'79386c1a07afad1707f1408803cd1781dfae6b7c8b793687602e56599501b64f',
'4200862bf5450416896c12aed9b6376f955ddcf34e5fb193702a8c64a54b64cb',
'aaf07de10b4fd38382928483e814fed7e791a66f8d6109380925c2b4a21023ac',
'9b66677e6cc346d5ba7eea36f24f8d49c122e6faa21dcf7fbb6eb426b8ffa6f3',
'a56bb80578dff14ec129aa8e794a501774f2c1e01e3f5356288aa5ef1e1f888f',
'55e144109739eab4572f14e115e8750ddd0a1af434281106107d865703186701',
'92b29c2d877a1f527efb66a006102ac0017dcbd99dddd9eb3b3856108bd4e4ab',
'f7950ef83571c83413d724e134d421b084e6fbed9539c972ebca2f7602b2dc64',
'd5d07ef78adff0be2c96bb71456791263c7cb648cb094a5885895293d9a6843d',
'9f112c99e8b034e8a1aa9d411a648cfbb1a7d3cea20e0f6eeb9cbf6f2aa75bd5',
'873039ffa011722a84d3bcbae49d0f0cd375584d12765f6ac8395ca93341800d',
'79386c1a07afad1707f1408803cd1781dfae6b7c8b793687602e56599501b64f',
]

key_index = 0
vtotal = Virustotal(API_KEY="873039ffa011722a84d3bcbae49d0f0cd375584d12765f6ac8395ca93341800d", API_VERSION="v3")


# 修改文件名
def getHash(filename, filepath, type):
    datas = {}  # 结果存为json，以便后需
    f = open(filepath, "rb")
    rb = f.read()
    data = {'MD5': hashlib.md5(rb).hexdigest(),
            'SHA1': hashlib.sha1(rb).hexdigest(),
            'SHA256': hashlib.sha256(rb).hexdigest()}

    newname = data[type]
    newname = filepath.replace(filename, newname)
    datas[filename] = data
    f.close()
    # shutil.copyfile(filepath, newname) #重命名并保存原文件
    os.rename(filepath, newname)  # 直接重命名
    print("重命名完成！")


def func(path, sub):
    if os.path.isdir(path):
        # 如果绝对路径下的文件夹
        for i in os.listdir(path):  # i文件名
            path2 = os.path.join(path, i)  # 拼接绝对路径
            if os.path.isdir(path2):  # 判断如果是文件夹,调用本身
                func(path2, sub)
            else:
                sub.append(path2)
    elif os.path.isfile(path):
        # 如果绝对路径下的文件
        sub.append(path)
    else:
        print("File or path doesn\'t exit")


def main_3(type):
    print("""
    ///
    // 888    888        d8888   d8888b   888    888 // 
    // 888    888       d88888 d88P  Y88b 888    888 // 
    // 888    888      d88P888 Y88b       888    888 // 
    // 8888888888     d88P 888   Y888b    8888888888 // 
    // 888    888    d88P  888      Y88b  888    888 // 
    // 888    888   d88P   888        888 888    888 // 
    // 888    888  d8888888888 Y88b  d88P 888    888 // 
    // 888    888 d88P     888   Y8888P   888    888 //                                              
    ///

                   By C  @2021/12/27
    """)
    flag = True
    while flag != '#':
        path = input('请输入文件名或文件所在的绝对路径:')
        if path.strip('\n') == '':
            continue
        else:
            path = path.strip('\n')
        # 输入路径处理
        if "/" in path:
            path = path.replace("/", "\\")

        sub = []

        flag1 = False
        func(path, sub)
        for i in sub:
            filename = i.split('\\')[-1]

            filepath = i
            flag1 = getHash(filename, filepath, type)

        flag1 = False
        path = ''
        sub = []
        flag = input('Enter \'#\' to quit or others to continue!')

#修改key操作
#caozuo=1 ： 上传操作
#caozuo=2 ： 下载报告操作
def change_vtotal(caozuo):
    global vtotal
    global key_index
    key_index=key_index+1
    if key_index == len(key_list):
        return "Run out of key"
    if caozuo==1:
        print("Change New key"+str(key_index)+":"+key_list[key_index])
        with open(plainid_log_dir, "a+") as f:
            f.write("Change New key"+str(key_index)+":"+key_list[key_index] + "\n")

        if create_new_log == "True":
            with open(plainid_log_dir_time, "a+") as f:
                f.write("Change New key" + str(key_index) + ":" + key_list[key_index] + "\n")

    elif caozuo==2:
        print("Change New key" + str(key_index) + ":" + key_list[key_index])
        with open(result_log_dir, "a+") as f:
            f.write("Change New key" + str(key_index) + ":" + key_list[key_index] + "\n")

        if create_new_log == "True":
            with open(result_log_dir_time, "a+") as f:
                f.write("Change New key" + str(key_index) + ":" + key_list[key_index] + "\n")

    vtotal=Virustotal(API_KEY=key_list[key_index], API_VERSION="v3")
    time.sleep(1)
    return "Success"

def get_plain_id(base64_id):
    base64_byte = base64.b64decode(base64_id)
    base64_str = str(base64_byte, encoding="utf-8")
    base64_str = base64_str[0:32]
    return base64_str

def get_id(FILE_PATH):
    files = {"file": (os.path.basename(FILE_PATH), open(os.path.abspath(FILE_PATH), "rb"))}
    resp = vtotal.request("files", files=files, method="POST")

    plain_id = get_plain_id(resp.data["id"])

    return plain_id

def get_dir_list(Path):
    malware_files_list = sorted(os.listdir(Path))
    return malware_files_list

def get_dist_Accuraccy(dist):
    for i in range(len(dist)):
        if dist[i][1]!=0:
            dist[i][3]=round(dist[i][2]/dist[i][1], 3)
    return dist

def upload_continue():
    with open(plainid_log_dir, 'r') as fp:

        lines = fp.readlines()
        dir_Path = lines[-2].lstrip("Now dir:").replace("\n",'')

        last_line = lines[-1]
    print("Now dir:" + dir_Path)
    time.sleep(1)
    # print(last_line)
    last_line = last_line.lstrip('[').replace("'", "").replace("]", "").replace("\n", "").replace(" ", "")
    # print(last_line)
    last_line_list = last_line.split(',')
    print(last_line_list)

    last_len = len(last_line_list)

    # dir_Path = input("请输入恶意样本文件夹：")

    # malware_files_list=get_dir_list(dir_Path)[]
    malware_files_list = get_dir_list(dir_Path)[last_len:]
    print(malware_files_list)

    now_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    with open(plainid_log_dir, "a+") as f:
        f.write(now_time + ":\n")

    #
    if create_new_log == "True":
        # print("*"*400)
        with open(plainid_log_dir_time, "a+") as f:
            f.write(now_time + ":\n")

    plain_id = last_line_list
    sum = 0
    malware_files_list_tqdm = tqdm(malware_files_list)
    for item_path in malware_files_list_tqdm:
        sum = sum + 1

        while True:
            try:
                item_plain_id = get_id(dir_Path + "\\" + item_path)
                plain_id.append(item_plain_id)
                if sum % save_interval_id == 0:
                    with open(plainid_log_dir, "a+") as f:
                        f.write("Now dir:" + dir_Path + "\n")
                        f.write(str(plain_id) + "\n")

                    if create_new_log == "True":
                        with open(plainid_log_dir_time, "a+") as f:
                            f.write("Now dir:" + dir_Path + "\n")
                            f.write(str(plain_id) + "\n")

                break

            except Exception as e:
                if "User is banned" in str(e):

                    print("\033[1;31m Error massage:User is banned\033[0m")
                    # print("")
                    a = change_vtotal(1)

                elif "Quota exceeded" in str(e):
                    print("\033[1;31m Error massage:Quota exceeded\033[0m")
                    # print("Error massage:Quota exceeded")
                    a = change_vtotal(1)
                else:
                    print("\033[1;31m Error massage:" + str(e) + "\033[0m")
                    a = change_vtotal(1)

                if a == "Run out of key":
                    print("\033[1;31m Run out of key\033[0m")
                    with open(plainid_log_dir, "a+") as f:
                        f.write("Run out of key" + ":\n")
                        f.write("Now dir:" + dir_Path + "\n")
                        f.write(str(plain_id) + "\n")

                    if create_new_log == "True":
                        with open(plainid_log_dir_time, "a+") as f:
                            f.write("Run out of key" + ":\n")
                            f.write("Now dir:" + dir_Path + "\n")
                            f.write(str(plain_id) + "\n")

                    exit()
                elif a == "Success":
                    continue

    with open(plainid_log_dir, "a+") as f:
        f.write("Now dir:"+dir_Path + "\n")
        f.write(str(plain_id) + "\n")

    if create_new_log == "True":
        with open(plainid_log_dir_time, "a+") as f:
            f.write("Now dir:" + dir_Path + "\n")
            f.write(str(plain_id) + "\n")

    print("over")

def upload_file():
    # with open('plainid.log', 'r') as fp:
    #     lines = fp.readlines()
    #     last_line = lines[-1]
    # print(last_line)
    #
    # exit()

    dir_Path = input("请输入恶意样本文件夹：")
    # malware_files_list=get_dir_list(dir_Path)[]
    malware_files_list = get_dir_list(dir_Path)
    print(malware_files_list)

    now_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    with open(plainid_log_dir, "a+") as f:
        f.write(now_time + ":\n")

    if create_new_log == "True":
        # print("*"*400)
        with open(plainid_log_dir_time, "a+") as f:
            f.write(now_time + ":\n")


    plain_id=[]
    sum = 0
    malware_files_list_tqdm = tqdm(malware_files_list)
    for item_path in malware_files_list_tqdm:
        sum = sum + 1

        while True:
            try:
                item_plain_id = get_id(dir_Path + "\\" + item_path)
                plain_id.append(item_plain_id)
                if sum % save_interval_id==0:

                    with open(plainid_log_dir, "a+") as f:
                        f.write("Now dir:" + dir_Path + "\n")
                        f.write(str(plain_id) + "\n")

                    if create_new_log == "True":
                        # print("*"*400)
                        with open(plainid_log_dir_time, "a+") as f:
                            f.write("Now dir:" + dir_Path + "\n")
                            f.write(str(plain_id) + "\n")

                break

            except Exception as e:
                if "User is banned" in str(e):

                    print("\033[1;31m Error massage:User is banned\033[0m")
                    # print("")
                    a=change_vtotal(1)

                elif "Quota exceeded" in str(e):
                    print("\033[1;31m Error massage:Quota exceeded\033[0m")
                    # print("Error massage:Quota exceeded")
                    a=change_vtotal(1)
                else:
                    print("\033[1;31m Error massage:"+str(e)+"\033[0m")
                    a = change_vtotal(1)

                if a == "Run out of key":
                    print("\033[1;31m Run out of key\033[0m")

                    with open(plainid_log_dir, "a+") as f:
                        f.write("Run out of key" + ":\n")
                        f.write("Now dir:" + dir_Path + "\n")
                        f.write(str(plain_id) + "\n")

                    if create_new_log == "True":
                        # print("*"*400)
                        with open(plainid_log_dir_time, "a+") as f:
                            f.write("Run out of key" + ":\n")
                            f.write("Now dir:" + dir_Path + "\n")
                            f.write(str(plain_id) + "\n")

                    exit()
                elif a == "Success":
                    continue

    with open(plainid_log_dir, "a+") as f:
        f.write("Now dir:" + dir_Path + "\n")
        f.write(str(plain_id) + "\n")


    if create_new_log == "True":
        # print("*"*400)
        with open(plainid_log_dir_time, "a+") as f:
            f.write("Now dir:" + dir_Path + "\n")
            f.write(str(plain_id) + "\n")
    print("over")


def str_to_list():
    with open(result_log_dir, 'r') as fp:
        lines = fp.readlines()
        last_line = lines[-1]
    # last_line=last_line.lstrip("Now dir:")
    last_line = last_line.split(":")
    epoch = int(last_line[0])
    print(epoch)
    result = last_line[1]
    result = result.replace("[", "").replace("]", "").replace("'", "").replace(" ", "").replace("\n", "")
    result = result.split(",")
    dist = []
    supply = "test"
    all = detected = acc = 0

    flag = 0
    for i in result:
        flag = flag + 1
        if flag == 1:
            supply = i
        elif flag == 2:
            all = int(i)
        elif flag == 3:
            detected = int(i)
        elif flag == 4:
            acc = float(i)
            dist.append([supply, all, detected, acc])
            flag = 0

    # print(result)
    # print(dist)
    return  epoch,dist
    # print(last_line)


#caozuo1 = 从0开始下载报告
#caozuo2 = 中途开始下载报告

def main_1(caozuo):
    #【供应商名字,总检测数量，检出数量，检测率】
    supply_list=["Baidu","ClamAV","Qihoo-360","Panda","Alibaba","Tencent","Jiangmin","Cylance","Cyren","Bkav",
                 "Lionic","Elastic","DrWeb","MicroWorld_eScan","CAT_QuickHeal","ALYac","Zillya","Sangfor","K7AntiVirus",
                 "K7GW","Cybereason","Arcabit","BitDefenderTheta","SymantecMobileInsight","Symantec","ESET_NOD32","APEX",
                 "Paloalto","Kaspersky","BitDefender","NANO_Antivirus","ViRobot","Avast","Rising"]

    dist=[]
    for item in supply_list:
        dist.append([item,0,0,0])

    # dir_Path=input("请输入恶意样本文件夹：")
    # malware_files_list=get_dir_list(dir_Path)[]
    # malware_files_list = get_dir_list(dir_Path)
    # print(malware_files_list)

    # 载入plain id

    with open(plainid_log_dir, 'r') as fp:
        lines = fp.readlines()
        dir_Path = lines[-2].lstrip("Now dir:").replace("\n", '')
        last_line = lines[-1]
    print("Now dir:" + dir_Path)
    time.sleep(1)
    # print(last_line)
    last_line = last_line.lstrip('[').replace("'", "").replace("]", "").replace("\n", "").replace(" ", "")
    # print(last_line)
    last_line_list = last_line.split(',')

    plain_id_list = last_line_list
    # print("123")
    # print(plain_id_list)
    # print("123")
    epoch = 0

    # print("*" * 40)
    if caozuo == 2:
        # print("*"*40)
        # 如果是中途开始，则提前载入之前的结果与epoch
        old_epoch, dist = str_to_list()
        epoch = old_epoch
        # print(epoch)

        plain_id_list=plain_id_list[epoch:]
        # print(plain_id_list)
        # exit()


    #写入时间信息、检测文件夹信息
    now_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    with open(result_log_dir, "a+") as f:
        f.write(now_time + ":\n")
        f.write("Now dir:" + dir_Path + ":\n")

    if create_new_log == "True":
        with open(result_log_dir_time, "a+") as f:
            f.write(now_time + ":\n")
            f.write("Now dir:" + dir_Path + ":\n")

    # 开始使用用结果
    # print(plain_id_list)
    plain_id_list=tqdm(plain_id_list,ncols=30)
    for item_plain_id in plain_id_list:

        epoch=epoch+1
        # item_plain_id=get_id(dir_Path+"\\"+item_path)
        # print(item_plain_id)

        print("-" * 100)
        # print(item_path)
        # print(item_plain_id)
        #避免错误的response
        i=0

        #获取学信息
        while i<60:

            time.sleep(3)

            try:
                resp = vtotal.request(f"files/{item_plain_id}")
                res_dict=resp.data["attributes"]["last_analysis_results"]
            except Exception as e:

                if "User is banned" in str(e):

                    print("\033[1;31m Error massage:User is banned\033[0m")
                    # print("")
                    a = change_vtotal(2)

                elif "Quota exceeded" in str(e):
                    print("\033[1;31m Error massage:Quota exceeded\033[0m")
                    # print("Error massage:Quota exceeded")
                    a = change_vtotal(2)
                else:
                    print("\033[1;31m Error massage:" + str(e) + "\033[0m")
                    a = change_vtotal(2)

                if a == "Run out of key":
                    print("\033[1;31m Run out of key\033[0m")
                    exit()
                elif a == "Success":
                    continue

                print("error response - " + str(i))
                time.sleep(60)
                i = i + 1
                continue

            #如果下载的报告不为空，则成功退出循环
            if res_dict!={}:
                break

            print("error response - "+str(i))
            time.sleep(60)
            i=i+1

        if i==60:
            print("Network error")
            exit()



        # print(resp.data)
        # print(res_dict)
        # print(res_dict)
        # time.sleep(2)

        #开始统计
        for index in range(len(dist)):
            supply = dist[index][0]
            # print("supply = " + supply)

            if supply in res_dict:
                supply_dist = res_dict[supply]
                # 总数+1
                dist[index][1] += 1
                # 检测出+1
                if supply_dist['category'] == "malicious":
                    dist[index][2] += 1
            else:
                continue
        #计算精确度
        dist = get_dist_Accuraccy(dist)
        #写入结果
        if epoch% save_interval_res==0:
            with open(result_log_dir, "a+") as f:
                # f.write(now_time + ":\n")
                f.write(str(epoch)+":"+str(dist) + "\n")

            if create_new_log == "True":
                with open(result_log_dir_time, "a+") as f:
                    f.write(str(epoch) + ":" + str(dist) + "\n")


        print(str(epoch)+":"+str(dist))
        # time.sleep(2)
        # all=len(malware_files_list)
        # print(str(sum)+"/"+str(all)+"   sleep-*-*-*-*-*-")

    dist=get_dist_Accuraccy(dist)
    print("结果：")
    print(str(epoch)+":"+str(dist))


    with open(result_log_dir, "a+") as f:
        # f.write(now_time + ":\n")
        f.write(str(epoch) + ":" + str(dist) + "\n")

    if create_new_log == "True":
        with open(result_log_dir_time, "a+") as f:
            f.write(str(epoch) + ":" + str(dist) + "\n")

if __name__ == '__main__':
    # upload_continue()
    # upload_file()
    main_1(1)
