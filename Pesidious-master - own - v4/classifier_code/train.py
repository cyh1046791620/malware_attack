import torch
from classifier_code.utils import set_seed, set_plt_style
from classifier_code.dataset import make_loaders
from models import *
from classifier_code.utils import train, plot_confusion_matrix, get_accuracy
from torch import optim
from Detect_models import get_detect_model
import os
import sys
from pathlib import Path
import configparser

import torch.multiprocessing as mp
from multiprocessing import cpu_count

module_path = os.path.dirname(os.path.abspath(sys.modules[__name__].__file__))

config = configparser.ConfigParser()
# for RESTful interface to remote model
home = str(Path.home())
# home="E:\malware_rep\Pesidious-master - own"

home= os.path.join(module_path, '../')

config_file = str(os.path.join(home, 'pesidious.config'))
configFile = config.read(config_file)

dist = config['Detect_train_message']

batch_size =  int(dist['batch_size'])
test_size =float(dist['test_size'])
val_size = float(dist['val_size'])
max_seq_len = int(dist['max_seq_len'])
# malware_dir = dist['malware_dir']
benign_dir = dist['benign_dir']
lr = float(dist['lr'])
device = dist['device']
num_epochs = int(dist['num_epochs'])
patience = int(dist['patience'])
seed = int(dist['seed'])


local_model_path = config['RL_train_massage']['saved_model']
model = config['RL_train_massage']['model']

set_seed(seed)
set_plt_style()
if device == "cpu":
    device = torch.device("cpu")
elif device == "gpu":
    device = torch.device("cuda:0")

print(type(device))

# max_seq_len=4096
# malware_dir = "./Mutated_malware/"
# benign_dir = "./Data/benign"
# malware_one_sample = "mutated_e7f3c3f7b278b095a0f75a9a2d801836112bee510d9080685e9fe50cdcb4ba38"
# if model == "MalConvPlus":
#     model = MalConvPlus(8, max_seq_len, 128, 32).to(device)
# elif model == "MalConvBase":
#     model = MalConvBase(8, max_seq_len, 128, 32).to(device)
# elif model == "RCNN":
#     pass
# elif model == "AttentionRCNN":
#     pass
model=get_detect_model(model,max_seq_len,device)
optimizer = optim.Adam(model.parameters(), lr=lr)


def train_last(malware_one_sample):
    train_loader = make_loaders(batch_size, val_size, test_size, benign_dir, malware_one_sample,max_seq_len)

    # try:
    #     checkpoint = torch.load('./gym_malware/envs/utils/'+local_model_path, map_location=lambda storage, loc: storage)
    # except:
    #     checkpoint = torch.load('./gym_malware/envs/utils/'+local_model_path)

    try:
        checkpoint = torch.load('./Detect_checkpoints/'+local_model_path, map_location=lambda storage, loc: storage)
    except:
        checkpoint = torch.load('./Detect_checkpoints/'+local_model_path)
    model.load_state_dict(checkpoint['model'])
    optimizer.load_state_dict(checkpoint['optimizer'])
    l_epoch = checkpoint['epoch']
    train(model, train_loader, device, local_model_path.strip(".pt"),malware_one_sample, optimizer=optimizer, l_epoch=l_epoch)
    print('over')
    # train(model, train_loader, val_loader, device, "malconv_plus")


