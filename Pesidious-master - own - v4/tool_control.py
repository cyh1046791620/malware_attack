# import rl_train
# import classifier_code.train

# !/usr/bin/python
# **coding:utf-8**
# import sys
from prettytable import PrettyTable
import os
import configparser
import torch

config = configparser.ConfigParser()


# print(local_model_path)

# 修改 规避样本生成配置
def change_Mutate_config():
    num = input("Please choose var num(1-7):")
    os.system("cls")
    if num == '1':
        print("----------- Please input device ------------")

        flag = torch.cuda.is_available()

        print("1.CPU")
        if flag == True:
            print("2.GPU(Now is available)")
        else:
            print("2.GPU(Now is unavailable)")

        device = input("Please input num(1-2):")
        if device == "1":
            device = "cpu"
        else:
            device = "gpu"
        config.set('Mutate_message', "device", device)


    elif num == "2":
        print("------- Please input new directory_path --------")
        directory_path = input("Please input new directory_path(default:./Data/malware):")
        config.set('Mutate_message', "directory_path", directory_path)

    elif num == "3":
        print("------- Please input new output_path  --------")
        output_path = input("Please input new output_path(default:output_path):")
        config.set('Detect_train_message', "output_path", output_path)

    elif num == "4":
        # print("------- Please input new saved_model  --------")
        # saved_model = input("Please input new saved_model(default:output_path):")
        # config.set('Detect_train_message', "saved_model", saved_model)

        os.system("cls")
        print("---------- All saved_model -----------")
        saved_models = sorted(os.listdir("./models"))
        for i in range(len(saved_models)):
            print(str(i + 1) + "." + saved_models[i])
        print('-' * 40)

        num = input("Please input num(1-" + str(len(saved_models)) + "):")
        config.set("Detect_train_message", 'saved_model', saved_models[int(num) - 1])
        # config.write(open('pesidious.config', "w"))

    elif num == "5":
        print("------- Please input new rl_mutations --------")
        rl_mutations = input("Please input new rl_mutations ():")
        config.set('Detect_train_message', "rl_mutations", rl_mutations)

    elif num == "6":
        os.system("cls")
        dist3 = config['RL_strategy_function']
        dist3_len = len(dist3)
        list_name1 = []
        list_var1 = []
        for i in range(dist3_len):
            list_name1.append(str(i + 1) + "：function" + str(i + 1))
            list_var1.append(dist3['func' + str(i + 1)])
        table_action_list1 = PrettyTable(list_name1)
        table_action_list1.add_row(list_var1)
        print("-------- Change strategy function  --------")
        print("-------- All strategy function list --------")
        print(table_action_list1)
        print("-" * 40)
        new_strategy_num = input("Please input new strategy num:")

        config.set("RL_train_massage", 'strategy', dist3['func' + new_strategy_num])
        # config.write(open('pesidious.config', "w"))
        print("修改完成")

    config.write(open('pesidious.config', "w"))


# 修改检测样本配置
def change_detect_config():
    num = input("Please choose var num(1-11):")
    os.system("cls")
    if num == '1':
        print("--------- Please choose model ----------")
        dist1 = config['Detect_model_list']
        for i in range(len(dist1)):
            print(str(i + 1) + ':' + dist1["model" + str(i + 1)])

        new_model = input("Please choose num(1-" + str(len(dist1)) + "):")
        config.set('Detect_train_message', "model", dist1["model" + str(new_model)])

    elif num == "2":
        print("------- Please input new batchsize --------")
        batchsize = input("Please input new batchsize(2-64):")
        config.set('Detect_train_message', "batch_size", batchsize)

    elif num == "3":
        print("------- Please input new test_size --------")
        test_size = input("Please input new test_size(0-0.99):")
        config.set('Detect_train_message', "test_size", test_size)

    elif num == "4":
        print("------- Please input new val_size  --------")
        val_size = input("Please input new val_size (0-0.99):")
        config.set('Detect_train_message', "val_size", val_size)

    elif num == "5":
        print("------- Please input new max_seq_len  --------")
        max_seq_len = input("Please input new max_seq_len (0-2000000):")
        config.set('Detect_train_message', "max_seq_len", max_seq_len)

    elif num == "6":
        print("------- Please input new malware_dir --------")
        malware_dir = input("Please input new malware_dir (default:./Data/malware):")
        config.set('Detect_train_message', "malware_dir", malware_dir)

    elif num == "7":
        print("------- Please input new benign_dir --------")
        benign_dir = input("Please input new benign_dir (default:./Data/benign):")
        config.set('Detect_train_message', "benign_dir", benign_dir)

    elif num == "8":
        print("------ Please input new learning rate ------")
        lr = input("Please input new lr(0-1):")
        config.set('Detect_train_message', "lr", lr)

    elif num == "9":
        print("----------- Please input device ------------")

        flag = torch.cuda.is_available()

        print("1.CPU")
        if flag == True:
            print("2.GPU(Now is available)")
        else:
            print("2.GPU(Now is unavailable)")

        device = input("Please input num(1-2):")
        if device == "1":
            device = "cpu"
        else:
            device = "gpu"
        config.set('Detect_train_message', "device", device)

    elif num == "10":
        print("------ Please input new learning rate ------")
        num_epochs = input("Please input new num_epochs(0-1000):")
        config.set('Detect_train_message', "num_epochs ", num_epochs)

    elif num == "11":
        print("-------- Please input new patience --------")
        patience = input("Please input new patience(3):")
        config.set('Detect_train_message', "patience", patience)

    config.write(open('pesidious.config', "w"))


# 修改强化学习样本配置
def change_RL_config():
    num = input("Please choose var num(1-16):")
    os.system("cls")
    if num == '1':
        print("------- Please input new rl_gamma --------")
        rl_gamma = input("Please input new rl_gamma(0-1):")
        config.set('RL_train_massage', "rl_gamma", rl_gamma)

    elif num == "2":
        print("------- Please input new seed --------")
        seed = input("Please input new seed:")
        config.set('RL_train_massage', "seed", seed)

    elif num == "3":
        print("------- Please input new rl_episodes --------")
        rl_episodes = input("Please input new rl_episodes(defalut:1000):")
        config.set('RL_train_massage', "rl_episodes", rl_episodes)

    elif num == "4":
        print("------- Please input new rl_mutations  --------")
        rl_mutations = input("Please input new rl_mutations (defalut:80):")
        config.set('RL_train_massage', "rl_mutations", rl_mutations)

    elif num == "5":
        print("------- Please input new rl_save_model_interval  --------")
        rl_save_model_interval = input("Please input new rl_save_model_interval (defalut:250):")
        config.set('RL_train_massage', "rl_save_model_interval", rl_save_model_interval)

    elif num == "6":
        print("------- Please input new rl_output_directory --------")
        rl_output_directory = input("Please input new rl_output_directory (default:models1):")
        config.set('RL_train_massage', "rl_output_directory", rl_output_directory)

    elif num == "7":
        print("----------- Please input device ------------")

        flag = torch.cuda.is_available()

        print("1.CPU")
        if flag == True:
            print("2.GPU(Now is available)")
        else:
            print("2.GPU(Now is unavailable)")

        device = input("Please input num(1-2):")
        if device == "1":
            device = "cpu"
        else:
            device = "gpu"
        config.set('RL_train_massage', "device", device)

    elif num == "8":
        print("------ Please input new max_seq_len ------")
        max_seq_len = input("Please input new max_seq_len(0-1):")
        config.set('RL_train_massage', "max_seq_len", max_seq_len)

    elif num == "9":
        print("------ Please input new replay_buffer_size ------")
        replay_buffer_size = input("Please input new replay_buffer_size(defalut:2500):")
        config.set('RL_train_massage', "replay_buffer_size", replay_buffer_size)

    elif num == "10":
        print("------ Please input new threshold ------")
        threshold = input("Please input new threshold(defalut:60):")
        config.set('RL_train_massage', "threshold", threshold)

    elif num == "11":
        print("-------- Please input new malware_dir --------")
        malware_dir = input("Please input new malware_dir:")
        config.set('RL_train_massage', "malware_dir", malware_dir)
    elif num == "12":
        print("-------- Please input new benign_dir --------")
        benign_dir = input("Please input new benign_dir:")
        config.set('RL_train_massage', "benign_dir", benign_dir)

    elif num == "13":
        print("-------- Please input new model --------")

        dist1 = config['Detect_model_list']
        for i in range(len(dist1)):
            print(str(i + 1) + ':' + dist1["model" + str(i + 1)])

        new_model = input("Please choose num(1-" + str(len(dist1)) + "):")
        config.set('RL_train_massage', "model", dist1["model" + str(new_model)])
    elif num == "14":
        os.system("cls")
        dist3 = config['RL_strategy_function']
        dist3_len = len(dist3)
        list_name1 = []
        list_var1 = []
        for i in range(dist3_len):
            list_name1.append(str(i + 1) + "：function" + str(i + 1))
            list_var1.append(dist3['func' + str(i + 1)])
        table_action_list1 = PrettyTable(list_name1)
        table_action_list1.add_row(list_var1)
        print("-------- Change strategy function  --------")
        print("-------- All strategy function list --------")
        print(table_action_list1)
        print("-" * 40)
        new_strategy_num = input("Please input new strategy num:")

        config.set("RL_train_massage", 'strategy', dist3['func' + new_strategy_num])
        # config.write(open('pesidious.config', "w"))
        print("修改完成")


    elif num == "15":

        os.system("cls")
        print("---------- All checkpoints -----------")
        check_points_list = sorted(os.listdir("./Detect_checkpoints"))
        for i in range(len(check_points_list)):
            print(str(i + 1) + "." + check_points_list[i])
        print('-' * 40)

        num = input("Please input num(1-" + str(len(check_points_list)) + "):")
        config.set("RL_train_massage", 'saved_model', check_points_list[int(num) - 1])

        # model = input("Please input new model:")
        # config.set('RL_train_massage', "model", model)

    elif num == "16":
        print("----------- Please input pattern ------------")

        flag = torch.cuda.is_available()

        print("1.Single_agent")
        print("2.Double_agent")

        pattern = input("Please input num(1-2):")

        if pattern == "1":
            pattern = "Single_agent"
        elif pattern == "2":
            pattern = "Double_agent"
        config.set('RL_train_massage', "pattern", pattern)

    config.write(open('pesidious.config', "w"))


# 训练原始模型信息
def train_origin_model():
    while True:
        os.system("cls")
        configFile = config.read('pesidious.config')
        dist = config['Detect_train_message']

        table = PrettyTable(
            ['1.model', '2.batch_size', '3.test_size', '4.val_size', '5.max_seq_len', '6.malware_dir',
             '7.benign_dir', '8.lr', '9.device', '10.num_epochs', '11.patience'])

        table.add_row([dist['model'], dist['batch_size'], dist['test_size'], dist['val_size'], dist['max_seq_len'],
                       dist['malware_dir'], dist['benign_dir'], dist['lr'], dist['device'], dist['num_epochs'],
                       dist['patience']])

        print("-------- Current config message --------")
        print(table)
        print("------- Choose your next action --------")
        print("1.Change config.")
        print("2.Train an new model.")
        print("3.Train an old model.")
        print("4.Get the test sample detect accuracy.")
        print("5.Pridict a file.")
        print("0.Exit.")
        print("-" * 40)
        choice = input("Choose num (0-5):")

        if choice == "0":
            break
        elif choice == "1":
            change_detect_config()

        # 训练一个新的模型
        elif choice == "2":
            import Detect_train.train as Detect_train_obj
            os.system("cls")
            print("-------- Train an new model  --------")
            Detect_train_obj.train_start()
            break

        # 训练已有模型
        elif choice == "3":
            import Detect_train.train as Detect_train_obj
            os.system("cls")
            print("-------- Train an old model  --------")
            print("---------- All checkpoints -----------")
            check_points_list = sorted(os.listdir("./Detect_checkpoints"))
            for i in range(len(check_points_list)):
                print(str(i + 1) + "." + check_points_list[i])
            print('-' * 40)
            choice_num = input("Please choice old model:")
            old_model = check_points_list[int(choice_num) - 1]
            Detect_train_obj.train_last(old_model)
            break


        # 获得测试样本精确度
        elif choice == "4":
            import Detect_train.train as Detect_train_obj
            os.system("cls")
            print("-------- Get the test sample detect accuracy  --------")
            print("---------- All checkpoints -----------")
            check_points_list = sorted(os.listdir("./Detect_checkpoints"))
            for i in range(len(check_points_list)):
                print(str(i + 1) + "." + check_points_list[i])
            print('-' * 40)
            choice_num = input("Please choice old model:")
            choice_model_name = check_points_list[int(choice_num) - 1]
            print("Current model:" + choice_model_name + "; " + "Current dir: " + dist['malware_dir'] + ",  " + dist[
                'benign_dir'])
            Detect_train_obj.get_test_acc(choice_model_name)
            break
            # 获取测试样本的检测精确度
            pass

        # 获得单个文件的检测值
        elif choice == "5":
            import Detect_train.train as Detect_train_obj
            os.system("cls")
            print("-------- Pridict a file  --------")
            check_points_list = sorted(os.listdir("./Detect_checkpoints"))
            for i in range(len(check_points_list)):
                print(str(i + 1) + "." + check_points_list[i])
            print('-' * 40)
            choice_num = input("Please choice old model:")
            choice_model_name = check_points_list[int(choice_num) - 1]
            file_name = input("Please choice file name:")
            Detect_train_obj.predict(choice_model_name, file_name)
            break


# 训练强化学习模型主程序
def train_RL_model():
    while True:
        os.system("cls")
        configFile = config.read('pesidious.config')
        dist = config['RL_train_massage']

        table_massage1 = PrettyTable(
            ['1.rl_gamma', '2.seed', '3.rl_episodes', '4.rl_mutations', '5.rl_save_model_interval',
             '6.rl_output_directory',
             '7.device', '8.max_seq_len', '9.replay_buffer_size'])

        table_massage1.add_row(
            [dist['rl_gamma'], dist['seed'], dist['rl_episodes'], dist['rl_mutations'], dist['rl_save_model_interval'],
             dist['rl_output_directory'], dist['device'], dist['max_seq_len'], dist['replay_buffer_size']])

        table_massage2 = PrettyTable(
            ['10.threshold', '11.malware_dir', '12.benign_dir', '13.model', '14.strategy', '15.detect_model',
             '16.pattern'])

        table_massage2.add_row(
            [dist['threshold'], dist['malware_dir'], dist['benign_dir'], dist['model'], dist['strategy'],
             dist['saved_model'], dist['pattern']])

        dist1 = config['RL_choice_action']
        dist1_len = len(dist1)
        list_name = []
        list_var = []
        for i in range(dist1_len):
            list_name.append(str(i + 1) + "：action" + str(i + 1))
            list_var.append(dist1['ac' + str(i + 1)])
        table_action_list = PrettyTable(list_name)
        table_action_list.add_row(list_var)

        dist = config['Mutate_message']
        Mutate_message = PrettyTable(
            ['1.device', '2.directory_path', '3.output_path', '4.saved_model',
             '5.rl_mutations', '6.strategy'])

        Mutate_message.add_row(
            [dist['device'], dist['directory_path'], dist['output_path'], dist['saved_model'],
             dist['rl_mutations'], config['RL_train_massage']['strategy']])

        print("-------- Current train config message --------")
        print(table_massage1)
        print(table_massage2)

        print("------------ Current action list -------------")
        print(table_action_list)

        cur_strategy_func = config['RL_train_massage']['strategy']
        saved_model = config['RL_train_massage']['saved_model']
        print("------- Choose your next action --------")
        print("1.Change RL train config.")
        print("2.Edit actions list.")
        # print("3.Change strategy function.(current fuc:" + cur_strategy_func + " )")
        # print("4.Change detect model(current model:" + saved_model + ").")
        print("3.Train an new model.")
        # print("4.Change Mutate config.")
        print("4.Mutate malware samples.")
        print("0.Exit.")
        print("-" * 40)
        choice = input("Choose num (0-4):")

        # exit()
        if choice == "0":
            break
        elif choice == "1":
            change_RL_config()
        elif choice == "2":
            while True:
                os.system("cls")
                dist1 = config['RL_choice_action']
                dist1_len = len(dist1)
                list_name = []
                list_var = []
                for i in range(dist1_len):
                    list_name.append(str(i + 1) + "：action" + str(i + 1))
                    list_var.append(dist1['ac' + str(i + 1)])
                table_action_list = PrettyTable(list_name)
                table_action_list.add_row(list_var)
                print("-------- Current action list --------")
                print(table_action_list)

                print("--------- Edit actions list ----------")
                print("1.Remove an action.")
                print("2.Add an action.")
                print("0.Exit.")
                print("-" * 40)
                choice2 = input("Choose num (0-2):")

                if choice2 == "0":
                    break

                # 删除操作
                elif choice2 == "1":
                    num = input("Please input action num:")

                    dist2 = config['RL_choice_action']
                    list_var = []
                    for i in range(len(dist2)):
                        if i + 1 != int(num):
                            list_var.append(dist2['ac' + str(i + 1)])
                        config.remove_option("RL_choice_action", "ac" + str(i + 1))

                    for i in range(len(list_var)):
                        config.set("RL_choice_action", 'ac' + str(i + 1), list_var[i])
                    print("Remove success.")

                    config.write(open('pesidious.config', "w"))
                    # except:
                    #     print("No action found.")

                    # exit()

                # 添加操作
                elif choice2 == "2":
                    os.system("cls")
                    dist2 = config['RL_action_list']
                    dist2_len = len(dist2)
                    list_name1 = []
                    list_var1 = []
                    for i in range(dist2_len):
                        list_name1.append(str(i + 1) + "：action" + str(i + 1))
                        list_var1.append(dist2['ac' + str(i + 1)])
                    table_action_list1 = PrettyTable(list_name1)
                    table_action_list1.add_row(list_var1)
                    print("-------- Current action list --------")
                    print(table_action_list)
                    print("-------- All action list --------")
                    print(table_action_list1)
                    print("-" * 40)
                    add_num = input("Please input add num:")

                    config.set("RL_choice_action", 'ac' + str(dist1_len + 1), list_var1[int(add_num) - 1])
                    config.write(open('pesidious.config', "w"))
                    # exit()
        # elif choice == "3":
        #     os.system("cls")
        #     dist3 = config['RL_strategy_function']
        #     dist3_len = len(dist3)
        #     list_name1 = []
        #     list_var1 = []
        #     for i in range(dist3_len):
        #         list_name1.append(str(i + 1) + "：function" + str(i + 1))
        #         list_var1.append(dist3['func' + str(i + 1)])
        #     table_action_list1 = PrettyTable(list_name1)
        #     table_action_list1.add_row(list_var1)
        #     print("-------- Change strategy function  --------")
        #     print("-------- All strategy function list --------")
        #     print(table_action_list1)
        #     print("-" * 40)
        #     new_strategy_num = input("Please input new strategy num:")
        #
        #     config.set("RL_train_massage", 'strategy', dist3['func' + new_strategy_num])
        #     config.write(open('pesidious.config', "w"))
        #     print("修改完成")
        #
        # elif choice == "4":
        #     os.system("cls")
        #     print("---------- All checkpoints -----------")
        #     check_points_list = sorted(os.listdir("./Detect_checkpoints"))
        #     for i in range(len(check_points_list)):
        #         print(str(i + 1) + "." + check_points_list[i])
        #     print('-' * 40)
        #
        #     num = input("Please input num(1-" + str(len(check_points_list)) + "):")
        #     config.set("RL_train_massage", 'saved_model', check_points_list[int(num) - 1])
        #     config.write(open('pesidious.config', "w"))
        # exit()
        # pass

        elif choice == "3":
            print("-------- Train an new model  --------")
            import rl_train
            rl_train.main()

        # elif choice == "4":
        #     print("-------- Change Mutate config  --------")
        #     change_Mutate_config()

        elif choice == "4":
            os.system("cls")
            while True:
                print("-------- Current Mutate config message --------")
                print(Mutate_message)

                print("-------- Mutate malware samples  --------")
                print("1.Change mutate config.")
                print("2.Start mutate single file.")
                print("3.Start mutate dir files.")
                print("0.Exit.")
                print("-" * 40)
                choice2 = input("Choose num (0-3):")

                if choice2 == "0":
                    break

                elif choice2 == "1":
                    change_Mutate_config()

                elif choice2 == "2":

                    import mutate, time
                    file_path_name = input("Please input single file path:")
                    mutate.mutate_single_file(file_path_name)
                    time.sleep(2)

                elif choice2 == "3":
                    import mutate, time
                    mutate.mutate_dir_file()
                    time.sleep(2)

            # break


# 修改文件的形式
def change_filename_type():
    os.system("cls")
    print("------- change filename ------")
    print("1.SHA256")
    print("2.SHA1")
    print("3.MD5")
    num = input("Please choose var num(1-3):")

    if num == '1':
        import virustotal_detect.virustotal_detect as virustotal_detect
        virustotal_detect.main_3("SHA256")
        return

    elif num == '2':
        import virustotal_detect.virustotal_detect as virustotal_detect
        virustotal_detect.main_3("SHA1")
        return

    elif num == '3':
        import virustotal_detect.virustotal_detect as virustotal_detect
        virustotal_detect.main_3("MD5")
        return


# 修改virustotal配置文件
def change_virustotal_config():
    num = input("Please choose var num(1-5):")
    os.system("cls")

    if num == '1':
        print("------- Please input new save_interval_id --------")
        save_interval_id = input("Please input new save_interval_id(type:int+):")
        config.set('virustotal_detect', "save_interval_id", save_interval_id)

    elif num == "2":
        print("------- Please input new save_interval_res --------")
        save_interval_res = input("Please input new save_interval_res(type:int+):")
        config.set('virustotal_detect', "save_interval_res", save_interval_res)

    elif num == "3":
        print("------- Please input new result_log --------")
        print("---------- All result_log -----------")
        result_log_list = sorted(os.listdir("./virustotal_detect/result_log"))
        for i in range(len(result_log_list)):
            print(str(i + 1) + "." + result_log_list[i])
        print('-' * 40)

        num = input("Please input num(1-" + str(len(result_log_list)) + "):")
        config.set("virustotal_detect", 'result_log', result_log_list[int(num) - 1])

    elif num == "4":
        print("------- Please input new plainid_log  --------")
        print("---------- All plainid_log -----------")
        plainid_log_list = sorted(os.listdir("./virustotal_detect/plainid_log"))
        for i in range(len(plainid_log_list)):
            print(str(i + 1) + "." + plainid_log_list[i])
        print('-' * 40)

        num = input("Please input num(1-" + str(len(plainid_log_list)) + "):")
        config.set("virustotal_detect", 'plainid_log', plainid_log_list[int(num) - 1])

        # config.set('virustotal_detect', "plainid_log", plainid_log)

    elif num == "5":
        print("------- Please input new create_new_log  --------")
        # flag = torch.cuda.is_available()

        print("1.True")
        print("2.False")

        num = input("Please input num(1-2):")
        new_state = "True"
        if num == "1":
            new_state = "True"
        elif num == "2":
            new_state = "False"

        config.set('virustotal_detect', "create_new_log", new_state)

    config.write(open('pesidious.config', "w"))


# Virustotal检测主程序
def Virustotal_detect():
    while True:
        os.system("cls")
        configFile = config.read('pesidious.config')
        dist = config['virustotal_detect']

        table_massage = PrettyTable(
            ['1.save_interval_id', '2.save_interval_res', '3.result_log', '4.plainid_log', '5.create_new_log'])

        table_massage.add_row(
            [dist['save_interval_id'], dist['save_interval_res'], dist['result_log'], dist['plainid_log'],
             dist['create_new_log']])

        print("-------- Current config message --------")
        print(table_massage)

        print("------- Choose your next action --------")
        print("1.Change config.")
        print("2.Upload dir files.")
        print("3.Continue upload process.")
        print("4.Download results.")
        print("5.Continue download results.")
        print("6.Change file name")
        print("0.Exit.")
        print("-" * 40)
        choice = input("Choose num (0-6):")

        # exit()
        if choice == "0":
            break
        elif choice == "1":
            change_virustotal_config()
        elif choice == "2":
            import virustotal_detect.virustotal_detect as virustotal_detect

            os.system("cls")
            print("---------- Upload dir files -----------")
            virustotal_detect.upload_file()
        # 开始训练一个初始模型
        elif choice == "3":
            import virustotal_detect.virustotal_detect as virustotal_detect

            os.system("cls")
            print("---------- Continue upload process -----------")
            virustotal_detect.upload_continue()

        elif choice == "4":
            import virustotal_detect.virustotal_detect as virustotal_detect
            os.system("cls")
            print("---------- Download results -----------")
            virustotal_detect.main_1(1)

        elif choice == "5":
            import virustotal_detect.virustotal_detect as virustotal_detect

            os.system("cls")
            print("-------- Continue download results  --------")
            virustotal_detect.main_1(2)

        elif choice == "6":
            import virustotal_detect.virustotal_detect as virustotal_detect

            os.system("cls")
            print("-------- Change file name --------")
            change_filename_type()


if __name__ == '__main__':
    print("-" * 40)
    print("Please choose your work:")
    print("1.Train an original detect model.")
    print("2.Train a RL model.")
    print("3.Virustotal detect.")
    print("-" * 40)

    choice = input("Choose num (1-3):")
    print()

    # 训练初始分类器
    if choice == "1":
        os.system("cls")
        train_origin_model()

    # 训练强化学习模型
    elif choice == "2":
        os.system("cls")
        train_RL_model()

    elif choice == "3":
        os.system("cls")
        Virustotal_detect()
